#!/usr/bin/env ts-node

/**
 * Test script to verify thermal receipt generation
 * This script tests the new thermal-optimized receipt layout
 */

import { TemplateEngine } from '../services/templateEngine';

// Mock receipt data for testing
const mockReceiptData = {
  saleId: 'SALE-001',
  items: [
    {
      product: {
        id: '1',
        name: 'Coffee (Large)',
        price: 3500,
      },
      quantity: 2,
      discount: 0,
      subtotal: 7000,
    },
    {
      product: {
        id: '2',
        name: 'Sandwich with very long name that should wrap properly',
        price: 5000,
      },
      quantity: 1,
      discount: 500,
      subtotal: 4500,
    },
  ],
  total: 11500,
  paymentMethod: 'cash',
  note: 'Extra hot, no sugar',
  date: new Date(),
};

// Mock shop settings
const mockShopSettings = {
  shopName: 'My Coffee Shop',
  address: '123 Main Street, Downtown',
  phone: '+95 9 123 456 789',
  thankYouMessage: 'Thank you for your business!',
  receiptFooter: 'Visit us again soon!',
  receiptTemplate: 'classic',
};

// Mock translations
const mockTranslations = {
  mobilePOS: 'Mobile POS',
  receiptNumber: 'Receipt #',
  date: 'Date',
  paymentMethod: 'Payment',
  total: 'TOTAL',
  discount: 'Discount',
  saleNote: 'Note',
  thankYou: 'Thank you!',
  generatedBy: 'Generated by Mobile POS',
};

async function testThermalReceipt() {
  console.log('🧾 Testing Thermal Receipt Generation...\n');

  try {
    const templateEngine = new TemplateEngine();

    // Build template context
    const context = templateEngine.buildTemplateContext(
      mockShopSettings,
      mockReceiptData,
      mockTranslations
    );

    // Generate receipt HTML
    const receiptHtml = await templateEngine.renderReceipt('classic', context);

    console.log('✅ Receipt HTML generated successfully');
    console.log('📏 Receipt optimized for 80mm thermal paper');
    console.log('🎨 Using thermal-friendly CSS styling');

    // Check key thermal optimizations
    const optimizations = [
      receiptHtml.includes('size: 80mm auto') ? '✅' : '❌',
      receiptHtml.includes('width: 80mm') ? '✅' : '❌',
      receiptHtml.includes('font-size: 12px') ? '✅' : '❌',
      receiptHtml.includes('word-wrap: break-word') ? '✅' : '❌',
      receiptHtml.includes('dotted #ccc') ? '✅' : '❌',
    ];

    console.log('\n📋 Thermal Optimizations Check:');
    console.log(`${optimizations[0]} Page size set to 80mm auto`);
    console.log(`${optimizations[1]} Body width constrained to 80mm`);
    console.log(`${optimizations[2]} Appropriate font size for thermal`);
    console.log(`${optimizations[3]} Text wrapping enabled`);
    console.log(`${optimizations[4]} Thermal-friendly borders`);

    const allOptimized = optimizations.every((opt) => opt === '✅');

    if (allOptimized) {
      console.log('\n🎉 All thermal optimizations are in place!');
      console.log(
        '📱 Receipt should now display properly in thermal printing apps'
      );
    } else {
      console.log('\n⚠️  Some optimizations may be missing');
    }

    // Test content structure
    console.log('\n📄 Content Structure:');
    console.log(`✅ Shop name: ${mockShopSettings.shopName}`);
    console.log(`✅ Items: ${mockReceiptData.items.length} products`);
    console.log(`✅ Total: ${mockReceiptData.total} MMK`);
    console.log(`✅ Note: ${mockReceiptData.note}`);
  } catch (error) {
    console.error('❌ Error testing thermal receipt:', error);
    process.exit(1);
  }
}

// Run the test
testThermalReceipt()
  .then(() => {
    console.log('\n✨ Thermal receipt test completed successfully!');
  })
  .catch((error) => {
    console.error('💥 Test failed:', error);
    process.exit(1);
  });
